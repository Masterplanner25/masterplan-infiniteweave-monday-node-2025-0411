"""merge task models

Revision ID: f4ef29bb03f3
Revises: 23e1012a48d5
Create Date: 2025-10-18 15:50:38.864478

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f4ef29bb03f3'
down_revision: Union[str, None] = '23e1012a48d5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('drop_points',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('platform', sa.String(), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('date_dropped', sa.DateTime(), nullable=True),
    sa.Column('core_themes', sa.Text(), nullable=True),
    sa.Column('tagged_entities', sa.Text(), nullable=True),
    sa.Column('intent', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_drop_points_id'), 'drop_points', ['id'], unique=False)
    op.create_table('pings',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('drop_point_id', sa.String(), nullable=True),
    sa.Column('ping_type', sa.String(), nullable=True),
    sa.Column('source_platform', sa.String(), nullable=True),
    sa.Column('date_detected', sa.DateTime(), nullable=True),
    sa.Column('connection_summary', sa.Text(), nullable=True),
    sa.Column('external_url', sa.String(), nullable=True),
    sa.Column('reaction_notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['drop_point_id'], ['drop_points.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_pings_id'), 'pings', ['id'], unique=False)
    op.drop_index(op.f('ix_monetization_efficiencies_id'), table_name='monetization_efficiencies')
    op.drop_table('monetization_efficiencies')
    op.drop_index(op.f('ix_attention_values_id'), table_name='attention_values')
    op.drop_table('attention_values')
    op.drop_index(op.f('ix_impacts_id'), table_name='impacts')
    op.drop_table('impacts')
    op.drop_index(op.f('ix_revenue_scalings_id'), table_name='revenue_scalings')
    op.drop_table('revenue_scalings')
    op.drop_index(op.f('ix_engagements_id'), table_name='engagements')
    op.drop_table('engagements')
    op.drop_index(op.f('ix_efficiencies_id'), table_name='efficiencies')
    op.drop_table('efficiencies')
    op.drop_index(op.f('ix_lost_potentials_id'), table_name='lost_potentials')
    op.drop_table('lost_potentials')
    op.drop_index(op.f('ix_business_growths_id'), table_name='business_growths')
    op.drop_table('business_growths')
    op.drop_index(op.f('ix_ai_efficiencies_id'), table_name='ai_efficiencies')
    op.drop_table('ai_efficiencies')
    op.drop_index(op.f('ix_decision_efficiencies_id'), table_name='decision_efficiencies')
    op.drop_table('decision_efficiencies')
    op.drop_index(op.f('ix_execution_speeds_id'), table_name='execution_speeds')
    op.drop_table('execution_speeds')
    op.drop_index(op.f('ix_engagement_rates_id'), table_name='engagement_rates')
    op.drop_table('engagement_rates')
    op.drop_index(op.f('ix_ai_productivity_boosts_id'), table_name='ai_productivity_boosts')
    op.drop_table('ai_productivity_boosts')
    op.alter_column('memory_links', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ux_memory_links_src_tgt_type'), table_name='memory_links')
    op.drop_constraint(op.f('memory_links_source_node_id_fkey'), 'memory_links', type_='foreignkey')
    op.drop_constraint(op.f('memory_links_target_node_id_fkey'), 'memory_links', type_='foreignkey')
    op.create_foreign_key(None, 'memory_links', 'memory_nodes', ['target_node_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'memory_links', 'memory_nodes', ['source_node_id'], ['id'], ondelete='CASCADE')
    op.add_column('memory_nodes', sa.Column('extra', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
   
    # Safely convert existing ARRAY → JSONB
    op.execute("""
        ALTER TABLE memory_nodes
        ALTER COLUMN tags TYPE JSONB
        USING to_jsonb(tags);
    """)
    op.alter_column('memory_nodes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
  
    # Safely convert existing ARRAY → JSONB
    op.execute("""
        ALTER TABLE memory_nodes
        ALTER COLUMN tags TYPE JSONB
        USING to_jsonb(tags);
    """)
    op.drop_index(op.f('ix_memory_nodes_content_tsv'), table_name='memory_nodes', postgresql_using='gin')
    op.drop_index(op.f('ix_memory_nodes_created_at'), table_name='memory_nodes')
    op.drop_index(op.f('ix_memory_nodes_node_type'), table_name='memory_nodes')
    op.drop_column('memory_nodes', 'content_tsv')
    op.add_column('tasks', sa.Column('name', sa.String(), nullable=False))
    op.add_column('tasks', sa.Column('category', sa.String(), nullable=True))
    op.add_column('tasks', sa.Column('priority', sa.String(), nullable=True))
    op.add_column('tasks', sa.Column('status', sa.String(), nullable=True))
    op.add_column('tasks', sa.Column('due_date', sa.DateTime(), nullable=True))
    op.add_column('tasks', sa.Column('start_time', sa.DateTime(), nullable=True))
    op.add_column('tasks', sa.Column('end_time', sa.DateTime(), nullable=True))
    op.add_column('tasks', sa.Column('duration', sa.Float(), nullable=True))
    op.add_column('tasks', sa.Column('scheduled_time', sa.DateTime(), nullable=True))
    op.add_column('tasks', sa.Column('reminder_time', sa.DateTime(), nullable=True))
    op.add_column('tasks', sa.Column('recurrence', sa.String(), nullable=True))
    op.drop_index(op.f('ix_tasks_task_name'), table_name='tasks')
    op.create_index(op.f('ix_tasks_name'), 'tasks', ['name'], unique=False)
    op.drop_column('tasks', 'task_name')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tasks', sa.Column('task_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_tasks_name'), table_name='tasks')
    op.create_index(op.f('ix_tasks_task_name'), 'tasks', ['task_name'], unique=False)
    op.drop_column('tasks', 'recurrence')
    op.drop_column('tasks', 'reminder_time')
    op.drop_column('tasks', 'scheduled_time')
    op.drop_column('tasks', 'duration')
    op.drop_column('tasks', 'end_time')
    op.drop_column('tasks', 'start_time')
    op.drop_column('tasks', 'due_date')
    op.drop_column('tasks', 'status')
    op.drop_column('tasks', 'priority')
    op.drop_column('tasks', 'category')
    op.drop_column('tasks', 'name')
    op.add_column('memory_nodes', sa.Column('content_tsv', postgresql.TSVECTOR(), autoincrement=False, nullable=True))
    op.create_index(op.f('ix_memory_nodes_node_type'), 'memory_nodes', ['node_type'], unique=False)
    op.create_index(op.f('ix_memory_nodes_created_at'), 'memory_nodes', ['created_at'], unique=False)
    op.create_index(op.f('ix_memory_nodes_content_tsv'), 'memory_nodes', [sa.literal_column("to_tsvector('english'::regconfig, content)")], unique=False, postgresql_using='gin')
    op.alter_column('memory_nodes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('memory_nodes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column(
    'memory_nodes',
    'tags',
    existing_type=postgresql.ARRAY(sa.VARCHAR(length=50)),
    type_=postgresql.JSONB(astext_type=sa.Text()),
    nullable=True,
    postgresql_using='tags::jsonb'
)
    
    op.drop_column('memory_nodes', 'extra')
    op.drop_constraint(None, 'memory_links', type_='foreignkey')
    op.drop_constraint(None, 'memory_links', type_='foreignkey')
    op.create_foreign_key(op.f('memory_links_target_node_id_fkey'), 'memory_links', 'memory_nodes', ['target_node_id'], ['id'])
    op.create_foreign_key(op.f('memory_links_source_node_id_fkey'), 'memory_links', 'memory_nodes', ['source_node_id'], ['id'])
    op.create_index(op.f('ux_memory_links_src_tgt_type'), 'memory_links', ['source_node_id', 'target_node_id', 'link_type'], unique=True)
    op.alter_column('memory_links', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_table('ai_productivity_boosts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('tasks_with_ai', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tasks_without_ai', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time_saved', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_productivity_boosts_pkey'))
    )
    op.create_index(op.f('ix_ai_productivity_boosts_id'), 'ai_productivity_boosts', ['id'], unique=False)
    op.create_table('engagement_rates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('total_interactions', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_views', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('engagement_rates_pkey'))
    )
    op.create_index(op.f('ix_engagement_rates_id'), 'engagement_rates', ['id'], unique=False)
    op.create_table('execution_speeds',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ai_automations', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('systemized_workflows', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('decision_lag', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('execution_speeds_pkey'))
    )
    op.create_index(op.f('ix_execution_speeds_id'), 'execution_speeds', ['id'], unique=False)
    op.create_table('decision_efficiencies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('automated_decisions', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('manual_decisions', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('decision_efficiencies_pkey'))
    )
    op.create_index(op.f('ix_decision_efficiencies_id'), 'decision_efficiencies', ['id'], unique=False)
    op.create_table('ai_efficiencies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ai_contributions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('human_contributions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_tasks', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_efficiencies_pkey'))
    )
    op.create_index(op.f('ix_ai_efficiencies_id'), 'ai_efficiencies', ['id'], unique=False)
    op.create_table('business_growths',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('revenue', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('expenses', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scaling_friction', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('business_growths_pkey'))
    )
    op.create_index(op.f('ix_business_growths_id'), 'business_growths', ['id'], unique=False)
    op.create_table('lost_potentials',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('missed_opportunities', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time_delayed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('gains_from_action', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('lost_potentials_pkey'))
    )
    op.create_index(op.f('ix_lost_potentials_id'), 'lost_potentials', ['id'], unique=False)
    op.create_table('efficiencies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('focused_effort', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ai_utilization', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('capital', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('efficiencies_pkey'))
    )
    op.create_index(op.f('ix_efficiencies_id'), 'efficiencies', ['id'], unique=False)
    op.create_table('engagements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('likes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('shares', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('clicks', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('time_on_page', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_views', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('engagements_pkey'))
    )
    op.create_index(op.f('ix_engagements_id'), 'engagements', ['id'], unique=False)
    op.create_table('revenue_scalings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ai_leverage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('content_distribution', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('audience_engagement', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('revenue_scalings_pkey'))
    )
    op.create_index(op.f('ix_revenue_scalings_id'), 'revenue_scalings', ['id'], unique=False)
    op.create_table('impacts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('reach', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('engagement', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('conversion', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('impacts_pkey'))
    )
    op.create_index(op.f('ix_impacts_id'), 'impacts', ['id'], unique=False)
    op.create_table('attention_values',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content_output', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('platform_presence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('attention_values_pkey'))
    )
    op.create_index(op.f('ix_attention_values_id'), 'attention_values', ['id'], unique=False)
    op.create_table('monetization_efficiencies',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('total_revenue', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('audience_size', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('monetization_efficiencies_pkey'))
    )
    op.create_index(op.f('ix_monetization_efficiencies_id'), 'monetization_efficiencies', ['id'], unique=False)
    op.drop_index(op.f('ix_pings_id'), table_name='pings')
    op.drop_table('pings')
    op.drop_index(op.f('ix_drop_points_id'), table_name='drop_points')
    op.drop_table('drop_points')
    # ### end Alembic commands ###
